
=encoding utf8

=head1 NAME

Nano::Nodes - Persistable Index

=cut

=head1 ABSTRACT

Persistable Index Super Class

=cut

=head1 SYNOPSIS

  use Nano::Nodes;

  my $nodes = Nano::Nodes->new(
    type => 'Nano::Node',
  );

  # $nodes->save;

=cut

=head1 DESCRIPTION

This package provides a persistable index super class. It is meant to be
subclassed but can be used directly as well.

=cut

=head1 INHERITS

This package inherits behaviors from:

L<Nano::Node>

=cut

=head1 LIBRARIES

This package uses type constraints from:

L<Nano::Types>

=cut

=head1 ATTRIBUTES

This package has the following attributes:

=cut

=head2 scopes

  scopes(ArrayRef[CodeRef])

This attribute is read-only, accepts C<(ArrayRef[CodeRef])> values, and is optional.

=cut

=head2 type

  type(Str)

This attribute is read-only, accepts C<(Str)> values, and is required.

=cut

=head1 METHODS

This package implements the following methods:

=cut

=head2 add

  add(HashRef $data) : Object

The add method creates a new object, adds it to the index, and returns the
created object.

=over 4

=item add example #1

  # given: synopsis

  my $node = $nodes->add({ rand => time });

=back

=cut

=head2 all

  all() : ArrayRef[Object]

The all method proxies to the attached L<Nano::Search> instance and returns the
results.

=over 4

=item all example #1

  # given: synopsis

  my $all = $nodes->all;

=back

=cut

=head2 count

  count() : Int

The count method proxies to the attached L<Nano::Search> instance and returns
the results.

=over 4

=item count example #1

  # given: synopsis

  my $count = $nodes->count;

=back

=cut

=head2 del

  del(Str $name) : Maybe[Object]

The del method removes the object from the index and returns the object (if
found).

=over 4

=item del example #1

  # given: synopsis

  my $result = $nodes->del('0000001');

=back

=cut

=head2 drop

  drop() : Object

The drop method deletes the entire index and all of its indices.

=over 4

=item drop example #1

  # given: synopsis

  $nodes = $nodes->drop;

=back

=cut

=head2 first

  first() : Maybe[Object]

The first method proxies to the attached L<Nano::Search> instance and returns
the result.

=over 4

=item first example #1

  # given: synopsis

  my $first = $nodes->first;

=back

=cut

=head2 get

  get(Str $name) : Maybe[Object]

The get method returns the object (based on ID) from the index (if found).

=over 4

=item get example #1

  # given: synopsis

  my $result = $nodes->get('0000001');

=back

=cut

=head2 last

  last() : Maybe[Object]

The last method proxies to the attached L<Nano::Search> instance and returns
the result.

=over 4

=item last example #1

  # given: synopsis

  my $last = $nodes->last;

=back

=cut

=head2 next

  next() : Maybe[Object]

The next method proxies to the attached L<Nano::Search> instance and returns
the result.

=over 4

=item next example #1

  # given: synopsis

  my $next = $nodes->next;

=back

=cut

=head2 prev

  prev() : Maybe[Object]

The prev method proxies to the attached L<Nano::Search> instance and returns
the result.

=over 4

=item prev example #1

  # given: synopsis

  my $prev = $nodes->prev;

=back

=cut

=head2 scope

  scope(CodeRef $callback) : Object

The scope method registers a scope (search filter) and returns a new invocant
instance.

=over 4

=item scope example #1

  # given: synopsis

  $nodes = $nodes->scope(sub {
    my ($node) = @_;

    !!$node->{active}
  });

=back

=cut

=head2 search

  search() : Search

The search method returns a L<Nano::Search> object associated with the invocant.

=over 4

=item search example #1

  # given: synopsis

  my $search = $nodes->search;

=back

=cut

=head2 serialize

  serialize() : HashRef

The serialize method returns a persistence representaton of the invocant.
Circular dependencies can result in a deep recursion error, however, circular
dependencies can be persisted if modeled properly. B<Note:> blessed objects
which are neither L<Nano::Node> nor L<Nano::Nodes> will be ignored.

=over 4

=item serialize example #1

  # given: synopsis

  my $serial = $nodes->serialize;

=back

=cut

=head2 set

  set(Node $object) : Object

The set method adds the node object provided to the index and returns the
provided object.

=over 4

=item set example #1

  # given: synopsis

  use Nano::Node;

  my $node = Nano::Node->new(id => '0000003');

  $node = $nodes->set($node);

=back

=cut

=head1 AUTHOR

Al Newkirk, C<awncorp@cpan.org>

=head1 LICENSE

Copyright (C) 2011-2019, Al Newkirk, et al.

This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the L<"license
file"|https://github.com/cpanery/nano/blob/master/LICENSE>.

=head1 PROJECT

L<Wiki|https://github.com/cpanery/nano/wiki>

L<Project|https://github.com/cpanery/nano>

L<Initiatives|https://github.com/cpanery/nano/projects>

L<Milestones|https://github.com/cpanery/nano/milestones>

L<Contributing|https://github.com/cpanery/nano/blob/master/CONTRIBUTE.md>

L<Issues|https://github.com/cpanery/nano/issues>

=cut